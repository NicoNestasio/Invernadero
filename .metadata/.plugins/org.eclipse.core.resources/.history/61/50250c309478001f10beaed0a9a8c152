//---------------------------------------------------------------//
// includes
//---------------------------------------------------------------//
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "fsl_common.h"
#include "fsl_adc.h"
#include "fsl_power.h"
#include "fsl_swm.h"
#include "fsl_iocon.h"
#include "LPC845.h"
#include "fsl_debug_console.h"
#include "fsl_usart.h"


//---------------------------------------------------------------//
// defines
//---------------------------------------------------------------//
#define FALSE        0
#define TRUE         1
#define ADC0_CH2     2
#define SYS_TICK_FREQ 1000 // Frecuencia para 1 ms de intervalo

//---------------------------------------------------------------//
// Variables
//---------------------------------------------------------------//
long i;
uint32_t count_mseg, d0;
adc_result_info_t adcResultInfoStruct;
uint32_t frequency, count = 0, report = 5000;
uint8_t adc_conv_complete,ch, flagReceived = 0;
uint8_t txdBuffer[64];
volatile uint16_t flag_tick = 0, time = 0, interval = 0 ;
//---------------------------------------------------------------//
// Prototypes
//---------------------------------------------------------------//
void ADC_Configuration(uint32_t chs);
void delay_mseg(int mseg);
void SysTick_Handler(void);
void USART1_IRQHandler(void);

//---------------------------------------------------------------//
// main
//---------------------------------------------------------------//
int main(void) {


	BOARD_InitDebugConsole();

    CLOCK_EnableClock(kCLOCK_Swm);

    SWM_SetFixedPinSelect(SWM0, kSWM_ADC_CHN2, true);  // Pin para canal 2
    SWM_SetMovablePinSelect(SWM0, kSWM_USART1_TXD, kSWM_PortPin_P0_25);	    // USART0_TXD connect to P0_25
    SWM_SetMovablePinSelect(SWM0, kSWM_USART1_RXD, kSWM_PortPin_P0_24);		// USART0_RXD connect to P0_24

    CLOCK_DisableClock(kCLOCK_Swm);

    CLOCK_Select(kADC_Clk_From_Fro);
    CLOCK_SetClkDivider(kCLOCK_DivAdcClk, 1U);
    CLOCK_Select(kUART1_Clk_From_MainClk);

    POWER_DisablePD(kPDRUNCFG_PD_ADC0);
    frequency = CLOCK_GetFreq(kCLOCK_Fro) / CLOCK_GetClkDivider(kCLOCK_DivAdcClk);
    (void) ADC_DoSelfCalibration(ADC0, frequency);
    ADC_Configuration((1 << ADC0_CH2));  // Configura el canal 2

    ADC_EnableInterrupts(ADC0, kADC_ConvSeqAInterruptEnable);
    NVIC_EnableIRQ(ADC0_SEQA_IRQn);
    adc_conv_complete = FALSE;
    ADC_DoSoftwareTriggerConvSeqA(ADC0);

    usart_config_t config;
    uint8_t txdBuffer[64];

    usart_config_t user_config;
    USART_GetDefaultConfig(&user_config);
    user_config.baudRate_Bps = 9600;
    user_config.enableTx = true;
    user_config.enableRx = true;
    USART_Init(USART1, &user_config, CLOCK_GetFreq(kCLOCK_MainClk));
    USART_EnableInterrupts(USART1, kUSART_RxReadyInterruptEnable);
    NVIC_EnableIRQ(USART1_IRQn);


    gpio_pin_config_t out_config = {kGPIO_DigitalOutput, 1};
    GPIO_PortInit(GPIO, 1);
    GPIO_PinInit(GPIO, 1, 2, &out_config); // LED Rojo
    GPIO_PinInit(GPIO, 1, 0, &out_config); // LED Verde
    GPIO_PinInit(GPIO, 1, 1, &out_config); // LED Azul

    // Configura SysTick para interrumpir cada 1 ms
    SysTick_Config(SystemCoreClock / SYS_TICK_FREQ);

    while (1) {
    	if (adc_conv_complete == TRUE) {
    		if (flagReceived != 0 && interval >= report)
    	    {
        	    sprintf(txdBuffer, "Valor pote = %d  %d seg\r\n", d0, time);
        	    USART_WriteBlocking(USART1, txdBuffer, strlen(txdBuffer));

        	    interval = 0;

    	    }

    	    if ((d0 >= 1000) && (d0 < 2000)) {
    	        GPIO_PinWrite(GPIO, 1, 2, 0); // LED Rojo On
    	        delay_mseg(900);
    	        GPIO_PinWrite(GPIO, 1, 2, 1); // LED Rojo Off
    	    } else if ((d0 >= 2000) && (d0 < 3000)) {
    	        GPIO_PinWrite(GPIO, 1, 0, 0); // LED Verde On
    	        delay_mseg(900);
    	        GPIO_PinWrite(GPIO, 1, 0, 1); // LED Verde Off
    	    } else if (d0 >= 3000) {
    	        GPIO_PinWrite(GPIO, 1, 1, 0); // LED Azul On
    	        delay_mseg(900);
    	        GPIO_PinWrite(GPIO, 1, 1, 1); // LED Azul Off
    	    }

    	    adc_conv_complete = FALSE;
    	    ADC_DoSoftwareTriggerConvSeqA(ADC0);
    	}

    }
}

//---------------------------------------------------------------//
// interrupciones
//---------------------------------------------------------------//
void SysTick_Handler(void) {
    flag_tick++;
	if (flagReceived == 1){
        if (flag_tick % 1000 == 0) {
            time++;
        }
		interval++;
	}
}

void ADC0_SEQA_IRQHandler(void) {
    if (kADC_ConvSeqAInterruptFlag == (kADC_ConvSeqAInterruptFlag & ADC_GetStatusFlags(ADC0))) {
        ADC_GetChannelConversionResult(ADC0, ADC0_CH2, &adcResultInfoStruct);  // Lee del canal 2
        d0 = adcResultInfoStruct.result;
        ADC_ClearStatusFlags(ADC0, kADC_ConvSeqAInterruptFlag);
        adc_conv_complete = TRUE;
    }
}

//---------------------------------------------------------------//
// funciones
//---------------------------------------------------------------//
void ADC_Configuration(uint32_t chs) {
    adc_config_t adcConfigStruct;
    adc_conv_seq_config_t adcConvSeqConfigStruct;
    adcConfigStruct.clockMode = kADC_ClockSynchronousMode;
    adcConfigStruct.clockDividerNumber = 1;
    adcConfigStruct.enableLowPowerMode = false;
    adcConfigStruct.voltageRange = kADC_HighVoltageRange;
    ADC_Init(ADC0, &adcConfigStruct);

    adcConvSeqConfigStruct.channelMask = chs;
    adcConvSeqConfigStruct.triggerMask = 0;
    adcConvSeqConfigStruct.triggerPolarity = kADC_TriggerPolarityPositiveEdge;
    adcConvSeqConfigStruct.enableSingleStep = false;
    adcConvSeqConfigStruct.enableSyncBypass = false;
    adcConvSeqConfigStruct.interruptMode = kADC_InterruptForEachSequence;
    ADC_SetConvSeqAConfig(ADC0, &adcConvSeqConfigStruct);
    ADC_EnableConvSeqA(ADC0, true);
}

void USART1_IRQHandler(void)
{
	ch = USART_ReadByte(USART1);
	if (ch == '5') {
	    report = 5000;
	} else if (ch == '1') {
	    report = 10000;
	}

	flagReceived = 1;
}

void delay_mseg(int mseg) {
    flag_tick = 0;
    while (flag_tick < mseg); // Espera hasta que `flag_tick` alcance el valor deseado
}
