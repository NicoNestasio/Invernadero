//---------------------------------------------------------------//
// includes
//---------------------------------------------------------------//
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "fsl_common.h"
#include "fsl_adc.h"
#include "fsl_power.h"
#include "fsl_swm.h"
#include "fsl_iocon.h"
#include "LPC845.h"
#include "fsl_debug_console.h"

//---------------------------------------------------------------//
// defines
//---------------------------------------------------------------//
#define FALSE		0
#define TRUE		1
#define ADC0_CH0		0
#define ADC0_CH8		8
//---------------------------------------------------------------//
// Variables
//---------------------------------------------------------------//
long i;
uint32_t count_mseg, d0, d8;
adc_result_info_t adcResultInfoStruct;
uint32_t frequency, count = 0;
uint8_t adc_conv_complete, a = 0;
//---------------------------------------------------------------//
// Prototypes
//---------------------------------------------------------------//
void ADC_Configuration(uint32_t chs);
void delay_mseg(int mseg);
volatile uint16_t flag_tick=0;
//---------------------------------------------------------------//
// main
//---------------------------------------------------------------//
int main(void) {

    BOARD_InitDebugConsole();

    CLOCK_EnableClock(kCLOCK_Swm);

    SWM_SetFixedPinSelect(SWM0, kSWM_ADC_CHN0, true);

    CLOCK_DisableClock(kCLOCK_Swm);

    CLOCK_Select(kADC_Clk_From_Fro);
    CLOCK_SetClkDivider(kCLOCK_DivAdcClk, 1U);

    POWER_DisablePD(kPDRUNCFG_PD_ADC0);
    frequency = CLOCK_GetFreq(kCLOCK_Fro) / CLOCK_GetClkDivider(kCLOCK_DivAdcClk);
    (void) ADC_DoSelfCalibration(ADC0, frequency);
    ADC_Configuration((1<<ADC0_CH0));

    ADC_EnableInterrupts(ADC0, kADC_ConvSeqAInterruptEnable);
    NVIC_EnableIRQ(ADC0_SEQA_IRQn);
    adc_conv_complete = FALSE;
    ADC_DoSoftwareTriggerConvSeqA(ADC0);
    gpio_pin_config_t out_config = {kGPIO_DigitalOutput, 1};
	GPIO_PortInit(GPIO, 1);
	GPIO_PinInit(GPIO, 1, 2, &out_config);
	GPIO_PinInit(GPIO, 1, 0, &out_config);
	GPIO_PinInit(GPIO, 1, 1, &out_config);
	GPIO_PortInit(GPIO, 0);

    while(1) {
        if(adc_conv_complete == TRUE)
        {
			PRINTF("Ch0  = %d,", d0);
			PRINTF("\r\n");
			adc_conv_complete = FALSE;
			ADC_DoSoftwareTriggerConvSeqA(ADC0);
			if((d0 >= 1000) | (d0 < 2000)){
	        	GPIO_PinWrite(GPIO, 1, 2, 0); // Led Rojo On
	        	delay_mseg(1000);

			}else{
				if((d0>=2000) | (d0<3000)){
					GPIO_PinWrite(GPIO, 1, 0, 0); // Led Verde On

				}else{
					GPIO_PinWrite(GPIO, 1, 1, 0); // Led Azul On
				}
			}
        }
    }
}
//---------------------------------------------------------------//
// interrupciones
//---------------------------------------------------------------//
void ADC0_SEQA_IRQHandler(void)
{
    if (kADC_ConvSeqAInterruptFlag == (kADC_ConvSeqAInterruptFlag & ADC_GetStatusFlags(ADC0)))
    {
        ADC_GetChannelConversionResult(ADC0, ADC0_CH0, &adcResultInfoStruct);
        d0 =  adcResultInfoStruct.result;
        ADC_GetChannelConversionResult(ADC0, ADC0_CH8, &adcResultInfoStruct);
        d8 =  adcResultInfoStruct.result;
        ADC_ClearStatusFlags(ADC0, kADC_ConvSeqAInterruptFlag);
        adc_conv_complete = TRUE;
    }
}
//---------------------------------------------------------------//
// funciones
//---------------------------------------------------------------//
void ADC_Configuration(uint32_t chs)
{
    adc_config_t adcConfigStruct;
    adc_conv_seq_config_t adcConvSeqConfigStruct;
    adcConfigStruct.clockMode = kADC_ClockSynchronousMode;
    adcConfigStruct.clockDividerNumber = 1;
    adcConfigStruct.enableLowPowerMode = false;
    adcConfigStruct.voltageRange = kADC_HighVoltageRange;
    ADC_Init(ADC0, &adcConfigStruct);

    adcConvSeqConfigStruct.channelMask = chs;
    adcConvSeqConfigStruct.triggerMask = 0;
    adcConvSeqConfigStruct.triggerPolarity = kADC_TriggerPolarityPositiveEdge;
    adcConvSeqConfigStruct.enableSingleStep = false;
    adcConvSeqConfigStruct.enableSyncBypass = false;
    adcConvSeqConfigStruct.interruptMode = kADC_InterruptForEachSequence;
    ADC_SetConvSeqAConfig(ADC0, &adcConvSeqConfigStruct);
    ADC_EnableConvSeqA(ADC0, true);
}
void delay_mseg(int mseg){
	flag_tick = 0;
	while(flag_tick <= mseg);
}

